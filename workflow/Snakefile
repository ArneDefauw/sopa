from utils import WorkflowPaths, dump_args

assert "sdata_path" in config.keys(), "Argument --sdata_path is required"

paths = WorkflowPaths(config["sdata_path"])

rule all:
    input:
        paths.polygons,
        paths.explorer_experiment,

rule to_spatialdata:
    input:
        paths.raw,
    output:
        paths.sdata_zgroup,
    conda:
        "spatial"
    shell:
        f"""
        sopa read {config["reader"]["name"]} {paths.sdata_path} {paths.raw}
        """

if config["patchify"]["mode"] == "parallel":
    checkpoint prepare_parralel_segmentation:
        input:
            paths.sdata_zgroup,
        output:
            paths.n_patches_path,
            directory(paths.patches),
        conda:
            "spatial"
        shell:
            f"""
            sopa patchify {paths.sdata_path} {dump_args(config["patchify"])}
            """

    rule patch_segmentation:
        input:
            paths.n_patches_path,
            paths.patches,
        output:
            f"{paths.patches_dir}/{{index}}.zarr.zip",
        conda:
            "spatial"
        shell:
            f"""
            sopa segmentation cellpose {paths.sdata_path} --patch-dir {paths.patches_dir} --patch-index {{wildcards.index}} {dump_args(config["segmentation"]["cellpose"])}
            """

    def get_input_resolve_segmentation(wilcards):
        with open(checkpoints.prepare_parralel_segmentation.get(**wilcards).output[0], 'r') as f:
            return paths.cells_paths(int(f.read()))

    rule resolve_parralel_segmentation:
        input:
            get_input_resolve_segmentation,
        output:
            directory(paths.polygons),
        conda:
            "spatial"
        shell:
            f"""
            sopa segmentation resolve {paths.sdata_path} --patch-dir {paths.patches_dir} --expand-radius {config["segmentation"]["cellpose"]["expand_radius"]}
            """
else:
    rule sequential_segmentation:
        input:
            paths.sdata_zgroup,
        output:
            directory(paths.polygons),
        conda:
            "spatial"
        shell:
            f"""
            sopa segmentation cellpose {paths.sdata_path} {dump_args(config["segmentation"]["cellpose"])}
            """

rule aggregate:
    input:
        paths.polygons,
    output:
        directory(paths.table),
    conda:
        "spatial"
    shell:
        f"""
        sopa aggregate {paths.sdata_path} {dump_args(config["aggregate"])}
        """

rule explorer:
    input:
        paths.polygons,
        paths.table,
    output:
        paths.explorer_experiment,
    conda:
        "spatial"
    shell:
        f"""
        sopa explorer {paths.sdata_path} {paths.explorer_directory} {dump_args(config["explorer"])}
        """